%>  \brief
%>  This is the base class for generating objects that contain the contents of a chain
%>  file generated by the ParaMonte MCMC samplers such as [pm.sampling.Paradram](@ref Paradram).<br>
%>
%>  \details
%>  This class is meant to be primarily internally used by the ParaMonte MATLAB library samplers.<br>
%>  This class merely adds a number of visualizations to its superclass which are
%>  specific to the [pm.sampling.Paradram](@ref Paradram) sampler.<br>
%>
%>  \note
%>  See also the documentation of the class constructor
%>  [pm.sampling.FileContentsChainMCMC::FileContentsChainMCMC](@ref FileContentsChainMCMC::FileContentsChainMCMC).<br>
%>
%>  \note
%>  See also the documentation of the superclass [pm.sampling.FileContentsChain](@ref FileContentsChain).<br>
%>
%>  \note
%>  See below for information on the attributes (properties).<br>
%>
%>  \note
%>  See below for information on the class methods.<br>
%>
%>  \final{FileContentsChainMCMC}
%>
%>  \author
%>  \FatemehBagheri, May 20 2024, 1:25 PM, NASA Goddard Space Flight Center (GSFC), Washington, D.C.<br>
%>  \AmirShahmoradi, May 16 2016, 9:03 AM, Oden Institute for Computational Engineering and Sciences (ICES), UT Austin<br>
classdef FileContentsChainMCMC < pm.sampling.FileContentsChain

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    properties(Access = public)
    end

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    properties(Hidden)
    end

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    methods(Access = public)

        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

        %>  \brief
        %>  Return a scalar object of class [pm.sampling.FileContentsChainMCMC](@ref FileContentsChainMCMC).<br>
        %>
        %>  \details
        %>  This is the constructor of the class [pm.sampling.FileContentsChainMCMC](@ref FileContentsChainMCMC).<br>
        %>
        %>  \param[in]  file    :   The input scalar MATLAB string containing the path or web address to an external file.<br>
        %>  \param[in]  silent  :   See the corresponding argument of the superclass constructor [pm.sampling.FileContentsChain::FileContentsChain](@ref FileContentsChain::FileContentsChain).<br>
        %>                          (**optional**. The default is set by the superclass constructor [pm.sampling.FileContentsChain::FileContentsChain](@ref FileContentsChain::FileContentsChain).)
        %>  \param[in]  sep     :   See the corresponding argument of the superclass constructor [pm.sampling.FileContentsChain::FileContentsChain](@ref FileContentsChain::FileContentsChain).<br>
        %>                          (**optional**. The default is set by the superclass constructor [pm.sampling.FileContentsChain::FileContentsChain](@ref FileContentsChain::FileContentsChain).)
        %>  \param[in]  format  :   The input scalar MATLAB string containing the reading format of the Markov chain:
        %>                          <ol>
        %>                              <li>    If ``format`` is set to ``"compact"``,
        %>                                      the Markov chain will be read in compact (weighted) format.<br>
        %>                                      This format is fast and potentially highly memory-efficient.<br>
        %>                                      Beware that this format does not necessarily generate a compact chain
        %>                                      when the specified chain file is already written in verbose format.<br>
        %>                              <li>    If ``format`` is set to ``"verbose"``,
        %>                                      the Markov chain will be read in verbose (unweighted or unrolled) format.<br>
        %>                                      While the chain in this format is the **actual Markov chain**,
        %>                                      reading the chain in this format can be highly inefficient as it
        %>                                      can use too much memory for high-dimensional density functions.<br>
        %>                          </ol>
        %>                          (**optional**, default = ``"compact"``.)
        %>
        %>  \return
        %>  ``self``            :   The output scalar object of class [pm.sampling.FileContentsChainMCMC](@ref FileContentsChainMCMC).<br>
        %>
        %>  \interface{FileContentsChainMCMC}
        %>  \code{.m}
        %>
        %>      contents = pm.sampling.FileContentsChainMCMC(file)
        %>      contents = pm.sampling.FileContentsChainMCMC(file, [])
        %>      contents = pm.sampling.FileContentsChainMCMC(file, silent)
        %>      contents = pm.sampling.FileContentsChainMCMC(file, [], sep)
        %>      contents = pm.sampling.FileContentsChainMCMC(file, silent, sep)
        %>      contents = pm.sampling.FileContentsChainMCMC(file, silent, sep, [])
        %>      contents = pm.sampling.FileContentsChainMCMC(file, silent, sep, format)
        %>
        %>  \endcode
        %>
        %>  \remark
        %>  See also the documentation of the subclasses for example usage.<br>
        %>
        %>  \final{FileContentsChainMCMC}
        %>
        %>  \author
        %>  \FatemehBagheri, May 20 2024, 1:25 PM, NASA Goddard Space Flight Center (GSFC), Washington, D.C.<br>
        %>  \AmirShahmoradi, May 16 2016, 9:03 AM, Oden Institute for Computational Engineering and Sciences (ICES), UT Austin<br>
        function self = FileContentsChainMCMC(file, silent, sep, format)

            if  nargin < 4
                format = [];
            end

            if  nargin < 3
                sep = [];
            end

            if  nargin < 2
                silent = [];
            end

            self = self@pm.sampling.FileContentsChain(file, silent, sep);

            %%%%
            %%%% Unroll the chain if necessary and add the Markov-specific stats information.
            %%%%

            if  pm.introspection.verified(format, "string", 1) && strcmpi(format, "verbose")

                %%%% Unpack the chain data frames.

                self.df = pm.array.verbose(self.df, 1, self.df.sampleWeight);
                self.df.sampleWeight(:) = 1;
                self.nrow = length(self.df{:, 1});

            elseif ~isempty(format) && ~(pm.introspection.verified(format, "string", 1) && strcmpi(format, "compact"))

                help("pm.sampling.Paradram.readChain");
                disp("format");
                disp( format );
                error   ( newline ...
                        + "Unrecognized input value for ``format``." + newline ...
                        + "See the documentation displayed above for more information." + newline ...
                        + newline ...
                        );

            end

        end

        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    end

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    methods(Access = public, Hidden)

        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

        %>  \brief
        %>  Compute the statistics of the parent object of class [pm.sampling.FileContentsChainMCMC](@ref FileContentsChainMCMC)
        %>  and store the results in the respective fields of the ``stats`` attribute of the parent object.<br>
        %>
        %>  \details
        %>  This is a dynamic ``Hidden`` method of class [pm.sampling.FileContentsChainMCMC](@ref FileContentsChainMCMC).<br>
        %>  It is **inaccessible** to the end users of the library.<br>
        %>
        %>  \param[in]  self    :   The input parent object of class [pm.sampling.FileContentsChainMCMC](@ref FileContentsChainMCMC)
        %>                          which is **implicitly** passed to this dynamic method (not by the user).<br>
        %>
        %>  \interface{setstats}
        %>  \code{.m}
        %>
        %>      contents = pm.sampling.FileContentsChainMCMC();
        %>
        %>      contents.setstats();
        %>
        %>  \endcode
        %>
        %>  \final{setstats}
        %>
        %>  \author
        %>  \AmirShahmoradi, 2:11 PM Friday, November 8, 2024, Dallas, TX<br>
        %>  \FatemehBagheri, May 20 2024, 1:25 PM, NASA Goddard Space Flight Center (GSFC), Washington, D.C.<br>
        function setstats(self)

            setstats@pm.sampling.FileContentsChain(self);

            %%%%
            %%%% Add chain cormat.
            %%%%

            self.checkpoint("computing the sample correlation matrix...", false);
            self.stats.cor = pm.stats.Cor(@()self.df(:, self.slfc + 1 : end));
            self.checkpoint();

            %%%%
            %%%% Add chain covmat.
            %%%%

            self.checkpoint("computing the sample covariance matrix...", false);
            self.stats.cov = pm.stats.Cov(@()self.df(:, self.slfc + 1 : end));
            self.checkpoint();

            %%%%
            %%%% Add chain acf.
            %%%%

            self.checkpoint("computing the sample autocorrelation...", false);
            self.stats.acf = pm.stats.AutoCorr(@()self.df(:, self.slfc : end));
            self.checkpoint();

            self.stats.max = struct("val", [], "loc", []);
            self.stats.min = struct("val", [], "loc", []);

            %%%%
            %%%% The `{:,:}` slice is essential in MATLAB ~2020a.
            %%%%

            [self.stats.max.val, self.stats.max.loc] = max(self.df{:,:});
            [self.stats.min.val, self.stats.min.loc] = min(self.df{:,:});
            self.stats.avg = mean(self.df{:,:});
            self.stats.std = std(self.df{:,:});

        end

        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

        %>  \brief
        %>  Compute the statistics of the parent object of class [pm.sampling.FileContentsChainMCMC](@ref FileContentsChainMCMC)
        %>  and store the results in the respective fields of the ``stats`` attribute of the parent object.<br>
        %>
        %>  \details
        %>  This is a dynamic ``Hidden`` method of class [pm.sampling.FileContentsChainMCMC](@ref FileContentsChainMCMC).<br>
        %>  It is **inaccessible** to the end users of the library.<br>
        %>
        %>  \param[in]  self    :   The input parent object of class [pm.sampling.FileContentsChainMCMC](@ref FileContentsChainMCMC)
        %>                          which is **implicitly** passed to this dynamic method (not by the user).<br>
        %>
        %>  \interface{setvis}
        %>  \code{.m}
        %>
        %>      contents = pm.sampling.FileContentsChainMCMC();
        %>
        %>      contents.setvis();
        %>
        %>  \endcode
        %>
        %>  \final{setvis}
        %>
        %>  \author
        %>  \AmirShahmoradi, 2:12 PM Friday, November 8, 2024, Dallas, TX<br>
        %>  \FatemehBagheri, May 20 2024, 1:25 PM, NASA Goddard Space Flight Center (GSFC), Washington, D.C.<br>
        function setvis(self)

            setvis@pm.sampling.FileContentsChain(self);

            self.checkpoint("adding the ParaDRAM-specific visualization components...", true);

            silent_kws = {"silent", self.silent};
            self.checkpoint("adding DRAM-specific visualizations to the chain object...", false);

            %%%%
            %%%% Add the visualizations for ``meanAcceptanceRate``.
            %%%%

            try

                %%%% Find the keywords in the column names.
                %%%% This avoids exact matching, which is problematic between ParaMonte 1 and 2).
                for colname = string(self.df.Properties.VariableNames)
                    if  contains(lower(colname), "mean")
                        break;
                    end
                end

                self.vis.(colname) = struct();
                self.vis.(colname).line = pm.vis.PlotLine   ( @()self.df, "coly", colname, "colc", self.slfc ...
                                                            , "ylabel", {"txt", "Mean Acceptance Rate"} ...
                                                            , "xlabel", {"txt", "Sampling Step"} ...
                                                            , "axes", {"xscale", "log"} ...
                                                            , "plot", {"linewidth", 3} ...
                                                            , silent_kws{:} ...
                                                            );

            catch me

                warning ( newline ...
                        + "Failed to create the visualizations for the " + colname + " data column of the chain file." + newline ...
                        + "Here is the error message:" + newline ...
                        + newline ...
                        + string(me.identifier) + newline + string(me.message) + newline ...
                        + newline ...
                        );

            end

            %%%%
            %%%% Add the visualizations for ``burninLocation``.
            %%%%

            try

                %%%% Find the keywords in the column names.
                %%%% This avoids exact matching, which is problematic between ParaMonte 1 and 2).
                for colname = [string(self.df.Properties.VariableNames)]
                    if  contains(lower(colname), "burnin")
                        break;
                    end
                end

                self.vis.(colname) = struct();
                self.vis.(colname).line = pm.vis.PlotLine   ( @()self.df, "coly", colname, "colc", self.slfc ...
                                                            , "ylabel", {"txt", "MCMC Burnin Location"} ...
                                                            , "xlabel", {"txt", "Sampling Step"} ...
                                                            , "axes", {"xscale", "log"} ...
                                                            , "plot", {"linewidth", 3} ...
                                                            , silent_kws{:} ...
                                                            );

            catch me

                warning ( newline ...
                        + "Failed to create the visualizations for the " + colname + " data column of the chain file." + newline ...
                        + "Here is the error message:" + newline ...
                        + newline ...
                        + string(me.identifier) + newline + string(me.message) + newline ...
                        + newline ...
                        );

            end

            %%%%
            %%%% Add the visualizations for ``proposalAdaptation``.
            %%%%

            try

                %%%% Find the keywords in the column names.
                %%%% This avoids exact matching, which is problematic between ParaMonte 1 and 2).
                for colname = [string(self.df.Properties.VariableNames)]
                    if  contains(lower(colname), "adaptation")
                        break;
                    end
                end

                self.vis.(colname) = struct();
                self.vis.(colname).line = pm.vis.PlotLine   ( @()self.df, "coly", colname, "colc", self.slfc ...
                                                            , "ylabel", {"txt", "Proposal Adaptation"} ...
                                                            , "xlabel", {"txt", "Sampling Step"} ...
                                                            , "axes", {"yscale", "log"} ...
                                                            , "plot", {"linewidth", 2} ...
                                                            , silent_kws{:} ...
                                                            );
                self.vis.(colname).scatter = pm.vis.PlotScatter ( @()self.df, "coly", colname, "colc", self.slfc ...
                                                                , "ylabel", {"txt", "Proposal Adaptation"} ...
                                                                , "xlabel", {"txt", "Sampling Step"} ...
                                                                , "axes", {"yscale", "log"} ...
                                                                , silent_kws{:} ...
                                                                );

            catch me

                warning ( newline ...
                        + "Failed to create the visualizations for the " + colname + " data column of the chain file." + newline ...
                        + "Here is the error message:" + newline ...
                        + newline ...
                        + string(me.identifier) + newline + string(me.message) + newline ...
                        + newline ...
                        );

            end

            %%%%
            %%%% Report the timing.
            %%%%

            self.checkpoint();

        end

        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    end

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

end